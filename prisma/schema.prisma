datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  SALER
  USER
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  password  String
  firstName String?
  lastName  String?
  role      Role    @default(USER)
  googleId  String? @unique

  // Relationships
  products Product[]
  articles Article[] // A user can author many articles.
  comments Comment[] // A user can write many comments.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  parentId Int?
  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Float

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  sellerId Int?
  seller   User? @relation(fields: [sellerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id        Int     @id @default(autoincrement())
  title     String
  content   String
  published Boolean @default(false)

  // Relationship to the author
  authorId Int?
  author   User? @relation(fields: [authorId], references: [id])

  // An article can have many comments.
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  // Each comment belongs to an article.
  articleId Int
  article   Article @relation(fields: [articleId], references: [id])

  // Optionally, a comment is authored by a user.
  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
